name: Cherrypick
on:
  workflow_dispatch:
    inputs:
      Env:
        description: "Environment to which cherrypicking"
        required: true
        default: "qa"
        type: choice
        options:
          - qa
      commitIds:
        description: "Commit id's to cherrypick"
        required: true
        type: string
jobs:
  generate-new-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.generate_new_tag.outputs.new_tag }}
      previous_tag: ${{ steps.generate_new_tag.outputs.previous_tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate New tag
        uses: ./.github/generate_new_tag
        id: generate_new_tag
        with:
          release-branch: $GITHUB_REF_NAME
          environment: ${{ inputs.Env }}
  cherry-pick:
    needs: generate-new-tag
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com
      - name: validate Branch selected is in last two release branches
        shell: bash
        run: |
          git branch -a | grep release- > branches.txt
          tail -2 branches.txt | grep $GITHUB_REF_NAME
      - name: create and push new tag
        id: create-tag
        shell: bash
        run: |
          for i in $(echo ${{ inputs.commitIds }}| sed "s/,/ /g" )
          do
              git cherry-pick -x $i
          done
          git push origin $GITHUB_REF_NAME
          git tag ${{ needs.generate-new-tag.outputs.new_tag }}
          git push --tags
          echo "VERSION=${{ needs.generate-new-tag.outputs.new_tag }}" >> $GITHUB_ENV
      # - name: Generate data for jira submit
      #   shell: bash
      #   env:
      #     REGION: "ALL_REGIONS"
      #     ENV: "QA"
      #     DEPLOY_ENV_TYPE: "staging"
      #     TIME_STAMP: ""
      #   run: |
      #     echo "pipeline_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks" >> $GITHUB_ENV
      #     echo "pipeline_id=${GITHUB_RUN_ID}" >> $GITHUB_ENV
      #     echo "display_name=${GITHUB_REPOSITORY} ${GITHUB_REF_NAME}" >> $GITHUB_ENV
      #     echo "commit_tag=${{ steps.create-tag.outputs.new-tag }}" >> $GITHUB_ENV
      #     echo "repo_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
      #     echo "repo_name=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
      #     echo "deploy_environment_type=${{ env.DEPLOY_ENV_TYPE }}" >> $GITHUB_ENV
      #     echo "deployment_region=${{ env.REGION }}" >> $GITHUB_ENV
      #     echo "deploy_environment_display_name=${GITHUB_REPOSITORY} ${{ env.ENV}} ${{ env.REGION }}" >> $GITHUB_ENV
      #     echo "deploy_region=ALL" >> $GITHUB_ENV
      #     echo "commit_message=$(cat gitlog_raw.txt | tr '\n' ' ')" >> $GITHUB_ENV
      #     echo "time_stamp=$(date +"%Y-%m-%dT%H:%M:%S%z")" >> $GITHUB_ENV
      # - name: Update Jira
      #   uses: fjogeleit/http-request-action@v1
      #   with:
      #     url: ${{ secrets.JIRA_APP_URL }}
      #     method: "POST"
      #     customHeaders: '{"Content-Type": "application/json"}'
      #     username: adminuser
      #     password: oF0bBXMn
      #     data: '{"commit_message": "${{ env.commit_message }}", "pipeline_url": "${{ env.pipeline_url }}", "pipeline_id": "${{ env.pipeline_id }}", "display_name": "${{ env.display_name }}", "commit_tag": "${{ env.commit_tag}}", "repo_url": "${{ env.repo_url}}", "repo_name": "${{ env.repo_name }}", "deploy_environment_type": "${{ env.deploy_environment_type}}", "deployment_region": "${{ env.deployment_region }}", "deploy_environment_display_name": "${{ env.deploy_environment_display_name }}", "deploy_region": "${{ env.deploy_region }}",  "time_stamp": "${{ env.time_stamp }}" }'
      - name: Jira Changelog
        id: jira-changelog
        uses: ./.github/jira_changelog
        with:
          jira_host: ${{ secrets.JIRA_HOST }}
          jira_email: ${{ secrets.JIRA_EMAIL }}
          jira_token: ${{ secrets.JIRA_TOKEN }}
          jira_base_url: ${{ secrets.JIRA_BASE_URL }}
          source_control_range_from: ${{ needs.generate-new-tag.outputs.previous_tag }}
          source_control_range_to: ${{ needs.generate-new-tag.outputs.new_tag }}
      - name: Create a GitHub release
        id: github_release
        uses: ./.github/github_release
        with:
          tag: ${{ needs.generate-new-tag.outputs.new_tag }}
          changelog_message: ${{ steps.jira-changelog.outputs.changelog_message }}
      - name: Parse Jira Keys from changelog
        id: jira_keys
        uses: HighwayThree/jira-extract-issue-keys@v0.3-alpha
        with:
          commit-message: ${{ steps.jira-changelog.outputs.changelog_message }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Deployment Info to Jira
        if: steps.jira_keys.outputs.jira-keys != ''
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@v0.1-alpha
        with:
          cloud-instance-base-url: 'https://siva273.atlassian.net'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          deployment-sequence-number: '${{ github.run_id }}'
          update-sequence-number: '${{ github.run_id }}'
          issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
          display-name: "django-rest-api ${{ needs.generate-new-tag.outputs.new_tag }} "
          url: "${{github.event.repository.url}}/releases/tag/${{ needs.generate-new-tag.outputs.new_tag }}"
          description: "django-rest-api ${{ needs.generate-new-tag.outputs.new_tag }} "
          last-updated: '${{github.event.head_commit.timestamp}}'
          # label: 'Test Deployment Label'
          state: 'successful'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          pipeline-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          pipeline-url: '${{github.event.repository.url}}/actions/runs/${{github.run_id}}'
          environment-id: 'QA'
          environment-display-name: 'django-rest-api QA ALL_REGIONS'
          environment-type: 'staging'
      - name: Slack Notification
        uses: ./.github/slack_message
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: ${{ steps.jira-changelog.outputs.changelog_message }}
          SLACK_TITLE: New tag  ${{ needs.generate-new-tag.outputs.new_tag }} created
