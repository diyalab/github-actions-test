name: Cherrypick
on:
  workflow_dispatch:
    inputs:
      Env:
        description: "Environment to which cherrypicking"
        required: true
        default: "qa"
        type: choice
        options:
          - qa
      commitIds:
        description: "Commit id's to cherrypick comma seperated"
        required: true
        type: string
jobs:
  generate-new-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.generate_new_tag.outputs.new_tag }}
      previous_tag: ${{ steps.generate_new_tag.outputs.previous_tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate New tag
        uses: ./.github/generate_new_tag
        id: generate_new_tag
        with:
          release-branch: $GITHUB_REF_NAME
          environment: ${{ inputs.Env }}
  cherry-pick:
    runs-on: ubuntu-latest
    needs: [generate-new-tag]
    steps:
      - name: Check out code
        uses: actions/checkout@v3 # verified creator
        with:
          fetch-depth: 0
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Action"
          git config user.email "github-action@users.noreply.github.com"
      - name: validate Branch selected is in last two release branches
        shell: bash
        run: |
          git branch -a | grep release- > branches.txt
          tail -2 branches.txt | grep $GITHUB_REF_NAME
      - name: cherry pick and push
        id: create-tag
        shell: bash
        run: |
          OLD_COMMIT_ID=`git rev-parse HEAD`
          echo "starting commit id $OLD_COMMIT_ID"
          for i in $(echo ${{ inputs.commitIds }}| sed "s/,/ /g" )
          do
              commit=`echo $i | xargs`
              git cherry-pick -x $commit
          done
          git push origin $GITHUB_REF_NAME
          LATEST_COMMIT_ID=`git rev-parse HEAD`
          echo "latest commit id $LATEST_COMMIT_ID"
          git push origin $GITHUB_REF_NAME
          echo "LATEST_COMMIT_ID=$LATEST_COMMIT_ID" >> $GITHUB_ENV
          echo "VERSION=${{ needs.generate-new-tag.outputs.new_tag }}" >> $GITHUB_ENV
  push-tag:
    runs-on: ubuntu-latest
    needs: [generate-new-tag, cherry-pick]
    steps:
      - name: Check out code
        uses: actions/checkout@v3 # verified creator
        with:
          fetch-depth: 0
      # - name: echo commitid
      #   run: |
      #     LATEST_COMMIT_ID=`git rev-parse HEAD`
      #     echo "latest commit id $LATEST_COMMIT_ID"
      - name: create and push tag
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: ${{ needs.generate-new-tag.outputs.new_tag }}
          commit-sha: ${{ env.LATEST_COMMIT_ID}}
      # - name: Slack Notification
      #   uses: ./.github/slack_message
      #   with:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_ICON: https://cdn.spotdraft.com/devops/rocket-launch.jpeg
      #     SLACK_MESSAGE: Cherry Picked commits ${{ inputs.commitIds }}
      #     SLACK_TITLE: Created a new tag ${{ needs.generate-new-tag.outputs.new_tag }}  on ${{ github.repository }}
      #     SLACK_USERNAME: ${{ secrets.GIT_BOT_USERNAME }}
