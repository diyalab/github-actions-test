name: Create Release
on:
  workflow_dispatch:
jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: make release branch name
        id: release-name
        shell: bash
        run: |
          date=`echo $(date '+%Y-%m-%d') | tr -d '-'`
          echo "::set-output name=release::release-$date"
          echo "::set-output name=date::$date"

      - name: check-release-barnch-exists
        run: |
          echo ${{ steps.release-name.outputs.release }}
          if git rev-parse --verify --quiet remotes/origin/${{ steps.release-name.outputs.release }} > /dev/null; then
            echo "Branch name ${{ steps.release-name.outputs.release }} already exists."
            exit 1
          fi
      - name: create Release branch
        run: git checkout -b ${{ steps.release-name.outputs.release }}
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com
      - name: push Branch to remote
        run: git push -u origin ${{ steps.release-name.outputs.release }}:${{ steps.release-name.outputs.release }}
      - name: git create and push tag
        run: |
          git branch -a
          git tag qa_${{ steps.release-name.outputs.date }}
          git push --tags
      - name: Get previous release branch name
        id: previous-release-branch
        run: |
          git branch -a | grep remotes/origin/release- > branches.txt
          cat branches.txt
          echo "previous-release-branch=$(tail -2 branches.txt | head -1 | xargs )" >> $GITHUB_ENV
          echo ${{ env.previous-release-branch }}
      - name: get git diff between current and previous relese branches
        id: git-diff
        run: |
          git log ${{ steps.release-name.outputs.release }}...${{ env.previous-release-branch }} --oneline > gitlog.txt
          sed -i -e 's/^/* /' gitlog.txt
          sed -i "1 i\## What's new" gitlog.txt
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: qa_${{ steps.release-name.outputs.date }}
          name: qa_${{ steps.release-name.outputs.date }}
          bodyFile: gitlog.txt
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: "New release branch ${{ steps.release-name.outputs.release }} created and tagged with qa_${{ steps.release-name.outputs.date }}, https://github.com/SpotDraft/django-rest-api/releases/tag/qa_${{ steps.release-name.outputs.date }} :rocket:"
          SLACK_TITLE: Create New Release
      - name: Generate data for jira submit
        shell: bash
        run: |
          echo "pipeline_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks" >> $GITHUB_ENV
          echo "pipeline_id=${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "display_name=${GITHUB_REPOSITORY} ${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "commit_tag=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "repo_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "repo_name=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "deploy_environment_type=${{ env.DEPLOY_ENV_TYPE }}" >> $GITHUB_ENV
          echo "deployment_region=${{ env.REGION }}" >> $GITHUB_ENV
          echo "deploy_environment_display_name=${GITHUB_REPOSITORY} ${{ env.ENV}}+" "+${{ env.REGION }}" >> $GITHUB_ENV
          echo "deploy_region=ALL" >> $GITHUB_ENV
      - name: Update Jira
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.JIRA_APP_URL }}
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          username: adminuser
          password: oF0bBXMn
          data: '{"commit_message": "value_1", "pipeline_url": "value_2"}'
      # - name: Publish to Slack

      # - name: Initialize mandatory git config
      #   run: |
      #     git config user.name "GitHub Actions"
      #     git config user.email noreply@github.com
