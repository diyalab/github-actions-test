name: workflow for PR
on:
  pull_request:
    types: [opened, labeled]
jobs:
  build:
    if: ${{ github.event.label.name == 'ok-to-test' }}
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.build.outputs.image_name }}
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/build_and_push_ghcr
        id: build
        with:
          push-image: true
          environment: pr
          image_name: ghcr.io/spotdraft/django-rest-api
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
          PYTHON_BASE_IMAGE: ${{ secrets.PYTHON_BASE_IMAGE }}
  tests:
    needs: build
    name: Unit Tests
    if: ${{ github.event.label.name == 'ok-to-test' }}
    services:
      postgres:
        image: ghcr.io/spotdraft/postgres:11.3-with-migrations
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          PGDATA: "/postgres"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    container: ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/unit_tests
        with:
          tag: ${{ needs.build.outputs.image_tag }}
          image_name: ${{ needs.build.outputs.image_name }}
      - name: Coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: always() # always run even if the previous step fails
        with:
          lcov-file: '${{env.TEST_OUTPUT_DIR}}coverage.lcov'
          github-token: ${{ secrets.GH_BOT_PAT }}
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '${{env.TEST_OUTPUT_DIR}}TEST-*.xml'
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            Unit tests passed! :ok_hand:
          GITHUB_TOKEN: ${{ secrets.GH_BOT_PAT }}
  mypy:
    needs: build
    name: MyPy lint
    if: ${{ github.event.label.name == 'ok-to-test' }}
    runs-on: ubuntu-latest
    container: ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/mypy_lint
        id: mypy
        with:
          tag: ${{ needs.build.outputs.image_tag }}
          image_name: ${{ needs.build.outputs.image_name }}
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            MyPy lint passed! :ok_hand:
          GITHUB_TOKEN: ${{ secrets.GH_BOT_PAT }}
  add-label-test-passed:
    needs: [mypy, tests]
    name: Add tests passed label
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            test-passed
  add-test-failed-label:
    needs: [mypy, tests]
    name: Add tests failed label
    if: always() && (needs.mypy.result == 'failure' || needs.tests.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            test-failed

  purge-image:
    if: |
      always() && ${{ github.event.label.name == 'ok-to-test' }}
    needs: [build, mypy, tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/purge_image_from_ghcr
        with:
          owner: spotdraft
          name: django-rest-api
          tag: ${{ needs.build.outputs.image_tag }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
